name: CRM Release Please

on:
  workflow_dispatch:
  push:
    branches:
      - production/*

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please-crm:
    permissions:
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/production/')
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      tag_sha: ${{ steps.release.outputs.sha }}
    steps:
      - name: set release please config
        id: setter 
        run: |
          if [ "${{ github.event_name }}" == "create" ]; then
            echo "config=release-please-crm-config.json" >> "$GITHUB_OUTPUT"
          else
            echo "config=release-please-crm-patch-config.json" >> "$GITHUB_OUTPUT"
          fi
      - uses: google-github-actions/release-please-action@v4
        id: release
        name: Release Please CRM
        with:
          # this assumes that you have created a personal access token
          # (PAT) and configured it as a GitHub action secret named
          # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
          token: ${{ secrets.GITHUB_TOKEN }}
          # optional. customize path to release-please-config.json
          config-file:  ${{ steps.setter.outputs.config }}
          # optional. customize path to .release-please-manifest.json
          manifest-file: .release-please-manifest.json
          target-branch: ${{ github.ref_name }}

  changelog-syncer:
    permissions:
      contents: write
      pull-requests: write
    
    needs: release-please-crm
    runs-on: ubuntu-latest
    if: ${{ needs.release-please-crm.outputs.release_created }}
    env:
      TRUNK_BRANCH: main
      SOURCE_BRANCH: syncer-production-${{ needs.release-please-crm.outputs.tag_name }}-changelog
      TAG_VERSION: '${{ needs.release-please-crm.outputs.tag_name }}'
      CHERRY_PICK_SHA: '${{ needs.release-please-crm.outputs.tag_sha }}'
    steps:
      # add process to create new branch
      - uses: actions/checkout@v4
        name: checkout to current branch
        with:
          ref: ${{ env.TRUNK_BRANCH }}
      - name: create syncer branch
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/google-github-actions/release-please-action.git"
          git checkout -b ${{ env.SOURCE_BRANCH }}
          git push origin ${{ env.SOURCE_BRANCH }} -f
      - uses: actions/checkout@v4
        name: checkout to syncer branch
        with:
          ref: ${{ env.SOURCE_BRANCH }}
      - name: cherry pick release commit
        run: |
          sha=$(echo ${{env.CHERRY_PICK_SHA}} | cut -c 1-7)
          git pull
          git cherry-pick -m 1 $sha
      - name: revert manifest version patch
        run: |
          # Extract major and minor versions from version.json
          version=$(jq -r '.["."]' .release-please-manifest.json)
          major_minor=$(echo "$version" | cut -d '.' -f 1,2)

          # Construct the updated version with patch set to 0
          updated_version="${major_minor}.0"

          # Update the value in the .release-please-manifest.json file
          jq --arg updated_version "$updated_version" '.["."] = $updated_version' .release-please-manifest.json > temp.json && mv temp.json .release-please-manifest.json
          
          git add .
          git commit -m "revert manifest version patch"
          git push
      - name: pr sync to trunk
        if: ${{ needs.release-please-crm.outputs.release_created }}
        uses: actions/github-script@v7
        id: sync 
        with:
          script: |
            const { TRUNK_BRANCH, SOURCE_BRANCH, TAG_VERSION } = process.env
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Update changelog ${TAG_VERSION} to trunk`,
              body: `:writing_hand: Updating release changelog ${TAG_VERSION} to trunkbase`,
              head: SOURCE_BRANCH,
              base: TRUNK_BRANCH,
            })

            console.log(pr)